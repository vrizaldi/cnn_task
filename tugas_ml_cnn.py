# -*- coding: utf-8 -*-
"""Tugas ML CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_mkQjpDin-_p8iIEDiTl_cOe2UXDD0Gq
"""

import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator( rescale = 1.0/255.)
train_dataset = train_datagen.flow_from_directory('training',
                                                    target_size=(320,240),
                                                    batch_size=32,
                                                    class_mode='categorical',
                                                    color_mode='grayscale')
testing_datagen = ImageDataGenerator( rescale = 1.0/255.)
testing_dataset = testing_datagen.flow_from_directory('testing',
                                                        target_size=(320,240),
                                                        batch_size=32,
                                                        class_mode='categorical',
                                                        color_mode='grayscale')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(4, (3,3), activation='sigmoid', input_shape=(320, 240, 1)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.1), loss='categorical_crossentropy', metrics=['acc'])
model.summary()

history = model.fit(train_dataset, epochs=50, verbose=1,
                    validation_data=testing_dataset)

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()